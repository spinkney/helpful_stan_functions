#include special/inc_beta_inverse.stanfunctions

/** @ingroup qf
 * Skewed Generalized T Quantile Function
 *
 * @include \quantile_function\skewed_generalized_t_qf.stanfunctions
 *
 * For more information, please see @ref skew_generalized_t.
 *
 * @copyright Sean Pinkney, 2021 
 * @author Sean Pinkney
 * @param quant Real on \f$[0,\,1]\f$
 * @param mu Real 
 * @param sigma Real \f$\in (0, \infty)\f$ scale parameter
 * @param lambda Real \f$-1 < \lambda < 1\f$ 
 * @param r Real \f$\in (0, \infty)\f$ kurtosis parameter
 * @param q Real \f$\in (0, \infty)\f$ kurtosis parameter  
 * @return quantile of skew_generalized_t
 */
real skew_generalized_t_qf(real x, real mu, real sigma, real lambda, real p, real q, int mean_centered) {
  if (sigma <= 0) 
    reject("sigma must be > 0 found sigma = ", sigma);
  
  if (lambda >= 1 || lambda <= -1) 
    reject("lambda must be between (-1, 1) found lambda = ", sigma);
  
  if (p <= 0) 
    reject("p must be > 0 found p = ", p);
  
  if (q <= 0) 
    reject("q must be > 0 found q = ", q);
  
  real prob;
  real lam;
  real out;
  
  // needs the gamma_qf
  if (!is_inf(p) && is_inf(q)) 
    reject("not yet implemented for infinite q");
  
  if (is_inf(p)) 
    reject("not yet implemented for infinite p");
  
  if (x > 0.5 * (1 - lambda)) {
    prob = 1 - x;
    lam = -lambda;
    out = -(sigma * (lam - 1) * (1 / (q * inc_beta_inverse(1 - 2 * prob / (1 - lam), 1 / p, q)) - 1 / q) ^ (-1 / p));
  } else {
    prob = x;
    lam = lambda;
    out = sigma * (lam - 1) * (1 / (q * inc_beta_inverse(1 - 2 * prob / (1 - lam), 1 / p, q)) - 1 / q) ^ (-1 / p);
  }
  
  if (!is_nan(mean_centered)) 
    out -= (2 * sigma * lambda * q ^ (1 / p) * beta(2 / p, q - 1 / p)) / beta(1 / p, q);
  
  return out + mu;
}