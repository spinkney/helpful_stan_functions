/** @addtogroup 1d_interpolation 1-dimensional Interpolation Functions
*
* @include \interpolation\interp_1d_linear.stanfunctions
*
 * \ingroup interpolation
 *  @{ */

/**
* **Linear 1d interpolation**
*
* @author Juho Timonen
*
* @param y array of D-vectors, length `N_in`
* @param x incresing array of reals, length `N_in`
* @param x_out increasing array of reals, length `N_out`, values 
* must be in \f$(\min(x), \max(x)]\f$
* @return array of D-vectors, length `N_out`, corresponding to
* interpolated values `y_out`
*/
array[] vector interp_1d_linear(array[] vector y, data array[] real x,
                                data array[] real x_out) {
  int left = 1;
  int right = 1;
  real w = 1.0;
  int N_in = size(x);
  int N_out = size(x_out);
  int D = size(y[1]);
  array[N_out] vector[D] y_out;
  for (j in 1 : N_out) {
    while (x[right] < x_out[j]) {
      right = right + 1;
    }
    while (x[left + 1] < x_out[j]) {
      left = left + 1;
    }
    w = (x[right] - x_out[j]) / (x[right] - x[left]);
    y_out[j] = w * y[left] + (1 - w) * y[right];
  }
  return y_out;
}